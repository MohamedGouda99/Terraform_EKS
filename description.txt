1- Create a pod running Nginx:

A Pod is the smallest and simplest unit in the Kubernetes object model. A Pod represents a single instance of a running process in a cluster. To create a Pod running Nginx, you need to create a YAML file that defines the Pod object with the appropriate specifications. 

2- In this YAML file, we have defined a Pod named "nginx-pod" that has a single container named "nginx-container" running the Nginx image. You can create this Pod by running the following command:

kubectl apply -f nginx-pod.yaml

3- Create a service for the Pod you’ve just created:

A Service is an abstraction layer that exposes a set of Pods as a network service. To create a Service for the Pod you just created, you need to define a YAML file that specifies the Service object.

In this YAML file, we have defined a Service named "nginx-service" that selects Pods with the label "app=nginx" and exposes port 80. You can create this Service by running the following command:

kubectl apply -f nginx-service.yaml

4- verify the app is reachable by running the following command:

kubectl port-forward nginx-pod 8080:80

then browse by writing in search bar (http://<localhost_ip>:8080)

5- Create a ReplicaSet with 2 replicas. Make sure the label used for the selector and in the Pods is “type=web”:

A ReplicaSet is a Kubernetes object that ensures a specified number of replicas of a Pod are running at any given time. To create a ReplicaSet with 2 replicas that use the label "type=web" for the selector and in the Pods, you need to define a YAML file that specifies the ReplicaSet object

In this YAML file, we have defined a ReplicaSet named "nginx-replicaset

that specifies that we want 2 replicas of the Pod with the label "type=web". The selector field specifies the label selector for the ReplicaSet, and the template field specifies the template for creating new Pods.

You can create this ReplicaSet by running the following command:

kubectl apply -f nginx-replicaset.yaml

This will create two Pods with the label "type=web" and the Nginx container running in each of them. The ReplicaSet ensures that there are always two replicas of the Pod running.


6- Write a kustomized.yml file that will add to both the Service and Deployment:

A kustomization file is a YAML file that allows you to customize and configure Kubernetes objects. To write a kustomization file that will add to both the Service and Deployment objects, you need to define a YAML file that specifies the kustomization object.

In this YAML file, we have defined a Kustomization object that includes the Service and ReplicaSet YAML files. When you apply this kustomization file using kubectl apply -k, Kubernetes will create both the Service and ReplicaSet objects.

You can create these objects by running the following command:

kubectl apply -k kustomization.yaml

This will create both the Service and ReplicaSet objects that you defined in the YAML files.

That's it! You have now created a Pod running Nginx, created a Service for the Pod, verified the app is reachable, created a ReplicaSet with 2 replicas, and created a kustomization file to add to both the Service and Deployment.

