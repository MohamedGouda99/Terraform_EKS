name: Build and Deploy

on:
  push:
    branches: ["master"]

jobs:
  ssh_ec2:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Deploy in EC2
        env:
          PRIVATE_KEY: ${{secrets.AWS_PRIVATE_KEY}}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP}}
          USER_NAME: ${{ secrets.USER_NAME}}
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_KEY_ID}}
          REGION: ${{secrets.AWS_REGION}}

        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{env.PRIVATE_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{env.EC2_INSTANCE_IP}} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP 
          #############knowing current aws version#################
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "aws --version"
         
          #########################aws configure using IAM CRED##########################################

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "aws configure set aws_access_key_id ${{env.AWS_ACCESS_KEY_ID}}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "aws configure set aws_secret_access_key ${{env.AWS_SECRET_ACCESS_KEY}}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "aws configure set region ${{env.REGION}}"

          #########################################INSTALL kubectl & eksctl#################

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "chmod +x ./kubectl
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "kubectl version --short --client"

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "sudo mv /tmp/eksctl /usr/local/bin"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "eksctl version"

          #############################################create EKS Cluster################

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{env.USER_NAME}}@$EC2_INSTANCE_IP "eksctl create cluster --name my-eks --region us-west-1 --nodegroup-name pro-19 --node-type t3.medium --nodes 3 --nodes-min 1 --nodes-max 4 --managed"

          echo "done"

  install_terraform:
    needs: ssh_ec2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://releases.hashicorp.com/terraform/1.0.9/terraform_1.0.9_linux_amd64.zip
          unzip terraform_1.0.9_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

          echo "DONE"

      - name: Build
        run: |
          terraform version
          terraform init

  apply_terraform:
    needs: install_terraform
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Deploy
        run: |
          terraform plan -var="cluster_id=my-eks"
          terraform apply -var="cluster_id=my-eks" --auto-approve

          echo "DONE"
  

  
